{
  "articles": [
    {
      "path": "about.html",
      "title": "Matheus Cordeiro",
      "author": [],
      "contents": "\r\n\r\n          \r\n          \r\n          Portfolio Website\r\n          \r\n          \r\n          Home\r\n          About\r\n          ☰\r\n          \r\n          \r\n      \r\n        \r\n          \r\n            \r\n              \r\n            \r\n              Matheus Cordeiro\r\n            \r\n            \r\n              \r\n                \r\n                    \r\n                      \r\n                        LinkedIn\r\n                      \r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      \r\n                        GitHub\r\n                      \r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      \r\n                        Email\r\n                      \r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      \r\n                        Tableau\r\n                      \r\n                    \r\n                  \r\n                                  \r\n            \r\n          \r\n        \r\n        \r\n        \r\n          \r\n            \r\n            Bio\r\n            Matheus Cordeiro is an international student from Brazil, who is studying his Master in Business Administration at Cal Poly Pomona. With his bachelor’s in Chemical Engineering, he uses his analytical skills, combined with his previous experience in marketing, to provide important and relevant information to the decision-makers.\r\n            At this moment, he is looking to gain professional experience in different types of analytical areas related to data (data analysis, finance analyst, marketing analyst, etc). He has a passion for analyzing data and problem solving, and how it can facilitate innovation.\r\n            \r\n            \r\n            Education\r\n            California Polytechnic State University Pomona | Pomona, CA\r\n            Master in Business Analytics | August 2021 - August 2022 (expected)\r\n            Sao Paulo State University (USP) | Lorena, Brazil\r\n            B.S. in Chemical Engineering | January 2015 - December 2020\r\n            \r\n            \r\n            Experience\r\n            Center for Customer Insights and Digital Marketing | Data Analytics Lead | March 2022 - Present\r\n            Center for Customer Insights and Digital Marketing | Junior Data Scientist | September 2021 - March 2022\r\n            DuPont | Marketing Specialist | January 2021 - July 2021\r\n            DuPont | Marketing Strategy Intern LATAM | January 2020 - December 2020\r\n            BASF | Global Laboratory Intern | August 2018 - December 2019\r\n            \r\n          \r\n        \r\n      \r\n    \r\n\r\n    \r\n      \r\n        \r\n          \r\n            \r\n              \r\n            \r\n              Matheus Cordeiro\r\n            \r\n            \r\n              \r\n                \r\n                                    \r\n                    \r\n                      LinkedIn\r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      GitHub\r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      Email\r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      Tableau\r\n                    \r\n                  \r\n                                  \r\n              \r\n            \r\n            \r\n              \r\n              Bio\r\n              Matheus Cordeiro is an international student from Brazil, who is studying his Master in Business Administration at Cal Poly Pomona. With his bachelor’s in Chemical Engineering, he uses his analytical skills, combined with his previous experience in marketing, to provide important and relevant information to the decision-makers.\r\n              At this moment, he is looking to gain professional experience in different types of analytical areas related to data (data analysis, finance analyst, marketing analyst, etc). He has a passion for analyzing data and problem solving, and how it can facilitate innovation.\r\n              \r\n              \r\n              Education\r\n              California Polytechnic State University Pomona | Pomona, CA\r\n              Master in Business Analytics | August 2021 - August 2022 (expected)\r\n              Sao Paulo State University (USP) | Lorena, Brazil\r\n              B.S. in Chemical Engineering | January 2015 - December 2020\r\n              \r\n              \r\n              Experience\r\n              Center for Customer Insights and Digital Marketing | Data Analytics Lead | March 2022 - Present\r\n              Center for Customer Insights and Digital Marketing | Junior Data Scientist | September 2021 - March 2022\r\n              DuPont | Marketing Specialist | January 2021 - July 2021\r\n              DuPont | Marketing Strategy Intern LATAM | January 2020 - December 2020\r\n              BASF | Global Laboratory Intern | August 2018 - December 2019\r\n              \r\n            \r\n        \r\n      \r\n    \r\n\r\n    \r\n    \r\n    ",
      "last_modified": "2022-03-19T21:07:18-07:00"
    },
    {
      "path": "index.html",
      "title": "Portfolio Website",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-19T21:07:20-07:00"
    },
    {
      "path": "sales_analysis.html",
      "title": "Sales Analysis",
      "description": "In this project I used Python Pandas & Python Matplotlib to analyze and answer business questions about 12 months worth of sales data. The data contains hundreds of thousands of electronics store purchases broken down by month, product type, cost, purchase address, etc.",
      "author": [],
      "contents": "\r\nImport Libraries\r\n\r\nimport pandas as pd \r\nimport seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.pyplot import figure\r\nfrom itertools import combinations \r\nfrom collections import Counter\r\n\r\nLoading data\r\n\r\njan = pd.read_csv(\"Sales_January_2019.csv\")\r\nfeb = pd.read_csv(\"Sales_February_2019.csv\")\r\nmar = pd.read_csv(\"Sales_March_2019.csv\")\r\napr = pd.read_csv(\"Sales_April_2019.csv\")\r\nmay = pd.read_csv(\"Sales_May_2019.csv\")\r\njun = pd.read_csv(\"Sales_June_2019.csv\")\r\njul = pd.read_csv(\"Sales_July_2019.csv\")\r\naug = pd.read_csv(\"Sales_August_2019.csv\")\r\nsep = pd.read_csv(\"Sales_September_2019.csv\")\r\nocto = pd.read_csv(\"Sales_October_2019.csv\")\r\nnov = pd.read_csv(\"Sales_November_2019.csv\")\r\ndec = pd.read_csv(\"Sales_December_2019.csv\")\r\n\r\nFirst look\r\n\r\njan_head=jan.head()\r\njan_head.to_html()\r\n’\r\n\r\n\r\n\r\n\r\nOrder ID\r\n\r\n\r\n\r\nProduct\r\n\r\n\r\n\r\nQuantity Ordered\r\n\r\n\r\n\r\nPrice Each\r\n\r\n\r\n\r\nOrder Date\r\n\r\n\r\n\r\nPurchase Address\r\n\r\n\r\n\r\n0\r\n\r\n\r\n\r\n141234\r\n\r\n\r\n\r\niPhone\r\n\r\n\r\n\r\n1\r\n\r\n\r\n\r\n700\r\n\r\n\r\n\r\n01/22/19 21:25\r\n\r\n\r\n\r\n944 Walnut St, Boston, MA 02215\r\n\r\n\r\n\r\n1\r\n\r\n\r\n\r\n141235\r\n\r\n\r\n\r\nLightning Charging Cable\r\n\r\n\r\n\r\n1\r\n\r\n\r\n\r\n14.95\r\n\r\n\r\n\r\n01/28/19 14:15\r\n\r\n\r\n\r\n185 Maple St, Portland, OR 97035\r\n\r\n\r\n\r\n2\r\n\r\n\r\n\r\n141236\r\n\r\n\r\n\r\nWired Headphones\r\n\r\n\r\n\r\n2\r\n\r\n\r\n\r\n11.99\r\n\r\n\r\n\r\n01/17/19 13:33\r\n\r\n\r\n\r\n538 Adams St, San Francisco, CA 94016\r\n\r\n\r\n\r\n3\r\n\r\n\r\n\r\n141237\r\n\r\n\r\n\r\n27in FHD Monitor\r\n\r\n\r\n\r\n1\r\n\r\n\r\n\r\n149.99\r\n\r\n\r\n\r\n01/05/19 20:33\r\n\r\n\r\n\r\n738 10th St, Los Angeles, CA 90001\r\n\r\n\r\n\r\n4\r\n\r\n\r\n\r\n141238\r\n\r\n\r\n\r\nWired Headphones\r\n\r\n\r\n\r\n1\r\n\r\n\r\n\r\n11.99\r\n\r\n\r\n\r\n01/25/19 11:59\r\n\r\n\r\n\r\n387 10th St, Austin, TX 73301\r\n\r\n\r\n’\r\nfeb_head=feb.head()\r\nfeb_head.to_html()\r\n’\r\n\r\n\r\n\r\n\r\nOrder ID\r\n\r\n\r\n\r\nProduct\r\n\r\n\r\n\r\nQuantity Ordered\r\n\r\n\r\n\r\nPrice Each\r\n\r\n\r\n\r\nOrder Date\r\n\r\n\r\n\r\nPurchase Address\r\n\r\n\r\n\r\n0\r\n\r\n\r\n\r\n150502\r\n\r\n\r\n\r\niPhone\r\n\r\n\r\n\r\n1\r\n\r\n\r\n\r\n700\r\n\r\n\r\n\r\n02/18/19 01:35\r\n\r\n\r\n\r\n866 Spruce St, Portland, ME 04101\r\n\r\n\r\n\r\n1\r\n\r\n\r\n\r\n150503\r\n\r\n\r\n\r\nAA Batteries (4-pack)\r\n\r\n\r\n\r\n1\r\n\r\n\r\n\r\n3.84\r\n\r\n\r\n\r\n02/13/19 07:24\r\n\r\n\r\n\r\n18 13th St, San Francisco, CA 94016\r\n\r\n\r\n\r\n2\r\n\r\n\r\n\r\n150504\r\n\r\n\r\n\r\n27in 4K Gaming Monitor\r\n\r\n\r\n\r\n1\r\n\r\n\r\n\r\n389.99\r\n\r\n\r\n\r\n02/18/19 09:46\r\n\r\n\r\n\r\n52 6th St, New York City, NY 10001\r\n\r\n\r\n\r\n3\r\n\r\n\r\n\r\n150505\r\n\r\n\r\n\r\nLightning Charging Cable\r\n\r\n\r\n\r\n1\r\n\r\n\r\n\r\n14.95\r\n\r\n\r\n\r\n02/02/19 16:47\r\n\r\n\r\n\r\n129 Cherry St, Atlanta, GA 30301\r\n\r\n\r\n\r\n4\r\n\r\n\r\n\r\n150506\r\n\r\n\r\n\r\nAA Batteries (4-pack)\r\n\r\n\r\n\r\n2\r\n\r\n\r\n\r\n3.84\r\n\r\n\r\n\r\n02/28/19 20:32\r\n\r\n\r\n\r\n548 Lincoln St, Seattle, WA 98101\r\n\r\n\r\n’\r\nmar_head=mar.head()\r\n\r\nMerging all the dataset into one single file\r\nIt’s looks like we have the same number of columns in each dataset. Let’s concatenate all of them\r\n\r\n\r\ndf = pd.concat([jan,feb,mar,apr,may,jun,jul,aug,sep,octo,nov,dec])\r\n\r\nLet’s check the shape of it\r\n\r\ndf.shape # Looks good\r\n(186850, 6)\r\n\r\nQuestions\r\nTo perform our analysis in this dataset I’ll analyze and do the data cleaning within the questions that I want to answer.\r\nQuestion 1: Whats was the best month for sales? How much was earned that month?\r\nWe must check the dtypes of our data first:\r\n\r\ndf.info()\r\n<class 'pandas.core.frame.DataFrame'>\r\nInt64Index: 186850 entries, 0 to 25116\r\nData columns (total 6 columns):\r\n #   Column            Non-Null Count   Dtype \r\n---  ------            --------------   ----- \r\n 0   Order ID          186305 non-null  object\r\n 1   Product           186305 non-null  object\r\n 2   Quantity Ordered  186305 non-null  object\r\n 3   Price Each        186305 non-null  object\r\n 4   Order Date        186305 non-null  object\r\n 5   Purchase Address  186305 non-null  object\r\ndtypes: object(6)\r\nmemory usage: 10.0+ MB\r\n\r\nWe’ll collect the first 2 characters of the column “Order Date” but first we need to transform this column to string type\r\n\r\ndf['Order Date']=df['Order Date'].astype('string')\r\n\r\nNow, we can see that the column “Order Date” changed to “string”\r\n\r\ndf.info()\r\n<class 'pandas.core.frame.DataFrame'>\r\nInt64Index: 186850 entries, 0 to 25116\r\nData columns (total 6 columns):\r\n #   Column            Non-Null Count   Dtype \r\n---  ------            --------------   ----- \r\n 0   Order ID          186305 non-null  object\r\n 1   Product           186305 non-null  object\r\n 2   Quantity Ordered  186305 non-null  object\r\n 3   Price Each        186305 non-null  object\r\n 4   Order Date        186305 non-null  string\r\n 5   Purchase Address  186305 non-null  object\r\ndtypes: object(5), string(1)\r\nmemory usage: 10.0+ MB\r\n\r\n\r\ndf[\"Order Date\"]=df[\"Order Date\"].str.replace(\"'\",\"\")\r\ndf[\"Order Date\"]=df[\"Order Date\"].str.replace(\"b\",\"\")\r\n\r\nCreating a column named “Month”\r\n\r\ndf[\"Month\"]=df[\"Order Date\"].str[:2]\r\n\r\nCreating a dictionary to replace the month numbers’s to the respective month\r\n\r\nmonth_dict = {\"01\":\"January\",\"02\":\"February\",\"03\":\"March\",\"04\":\"April\",\"05\":\"May\",\"06\":\"June\",\"07\":\"July\",\r\n             \"08\":\"August\",\"09\":\"September\",\"10\":\"October\",\"11\":\"November\",\"12\":\"December\"}\r\n\r\n\r\ndf[\"Month\"]=df[\"Month\"].replace(month_dict)\r\n\r\nModify the data type to numeric\r\n\r\ndf[\"Price Each\"]=pd.to_numeric(df[\"Price Each\"],errors='coerce')\r\ndf[\"Quantity Ordered\"]=pd.to_numeric(df[\"Quantity Ordered\"],errors='coerce')\r\n\r\nDropping the missing values in our dataset\r\n\r\ndf=df.dropna()\r\n\r\nCreating new column that corresponds to the total sales\r\n\r\ndf[\"Total_Sales\"] = df[\"Price Each\"]*df[\"Quantity Ordered\"]\r\ndf\r\n      Order ID                     Product  ...     Month  Total_Sales\r\n0       141234                      iPhone  ...   January       700.00\r\n1       141235    Lightning Charging Cable  ...   January        14.95\r\n2       141236            Wired Headphones  ...   January        23.98\r\n3       141237            27in FHD Monitor  ...   January       149.99\r\n4       141238            Wired Headphones  ...   January        11.99\r\n...        ...                         ...  ...       ...          ...\r\n25112   319666    Lightning Charging Cable  ...  December        14.95\r\n25113   319667       AA Batteries (4-pack)  ...  December         7.68\r\n25114   319668             Vareebadd Phone  ...  December       400.00\r\n25115   319669            Wired Headphones  ...  December        11.99\r\n25116   319670  Bose SoundSport Headphones  ...  December        99.99\r\n\r\n[185950 rows x 8 columns]\r\n\r\nCreating a new variable to assign the month grouped\r\n\r\nbest_month=df.groupby([\"Month\"]).sum()\r\nbest_month.reset_index(inplace=True)\r\nbest_month\r\n        Month  Quantity Ordered  Price Each  Total_Sales\r\n0       April           20558.0  3367671.02   3390670.24\r\n1      August           13448.0  2230345.42   2244467.88\r\n2    December           28114.0  4588415.41   4613443.34\r\n3    February           13449.0  2188884.72   2202022.42\r\n4     January           10903.0  1811768.38   1822256.73\r\n5        July           16072.0  2632539.56   2647775.76\r\n6        June           15253.0  2562025.61   2577802.26\r\n7       March           17005.0  2791207.83   2807100.38\r\n8         May           18667.0  3135125.13   3152606.75\r\n9    November           19798.0  3180600.68   3199603.20\r\n10    October           22703.0  3715554.83   3736726.88\r\n11  September           13109.0  2084992.09   2097560.13\r\n\r\nPloting the data using seaborn\r\n\r\nsns.barplot(x=\"Total_Sales\", y=\"Month\", data=best_month);\r\nplt.show()\r\n\r\n\r\nQuestion 2: Whats was the best month for sales? How much was earned that month?\r\nChanging the datatype on the column “Purchase Address”\r\n\r\ndf[\"Purchase Address\"]=df[\"Purchase Address\"].astype('string')\r\n\r\nCreating a new variable thats contains the city code\r\n\r\ncity=df[\"Purchase Address\"].str.split(pat=\",\",expand=True)\r\n\r\nCreating a new colunm to assign the values from the cities\r\n\r\ndf[\"City\"]=city[1]\r\n\r\nLet´s check how our df looks like now\r\n\r\ndf.head()\r\n  Order ID                   Product  ...  Total_Sales            City\r\n0   141234                    iPhone  ...       700.00          Boston\r\n1   141235  Lightning Charging Cable  ...        14.95        Portland\r\n2   141236          Wired Headphones  ...        23.98   San Francisco\r\n3   141237          27in FHD Monitor  ...       149.99     Los Angeles\r\n4   141238          Wired Headphones  ...        11.99          Austin\r\n\r\n[5 rows x 9 columns]\r\n\r\nCreating a new variable that contains info for cities grouped\r\n\r\nbest_city=df.groupby([\"City\"]).sum()\r\nbest_city.reset_index(inplace=True)\r\n\r\nPlotting the data\r\n\r\nsns.barplot(x=\"Total_Sales\", y=\"City\", data=best_city);\r\nplt.show()\r\n\r\n\r\nQuestion 3: What time we should display the advertisements to maxime the likelihood of customer’s buying products?\r\nChanging the datetype to datetime to be able to extract the hour\r\n\r\ndf[\"Order Date\"]=pd.to_datetime(df[\"Order Date\"])\r\ndf[\"Hour\"]=df[\"Order Date\"].dt.hour\r\n\r\nCreating a new variable the contains the info about hour grouped\r\n\r\nhour=df.groupby(\"Hour\").sum()\r\nhour.reset_index(inplace=True)\r\n\r\nPlotting using seaborn\r\n\r\nsns.lineplot(data=hour, x=\"Hour\", y=\"Total_Sales\");\r\nplt.xticks(hour[\"Hour\"]);\r\nplt.grid();\r\nplt.show()\r\n\r\n\r\nQuestion 4: What products are most often sold together?\r\nThe products are sold together when they have the same order ID, therefore we need only the row that have the same number for Order ID, and we’ll assign it to a new dataframe\r\n\r\nproducts=df[df[\"Order ID\"].duplicated(keep=False)]\r\nproducts.head()\r\n    Order ID                   Product  ...            City  Hour\r\n41    141275      USB-C Charging Cable  ...          Austin    16\r\n42    141275          Wired Headphones  ...          Austin    16\r\n57    141290  Apple Airpods Headphones  ...     Los Angeles     8\r\n58    141290     AA Batteries (4-pack)  ...     Los Angeles     8\r\n133   141365           Vareebadd Phone  ...   New York City    11\r\n\r\n[5 rows x 10 columns]\r\n\r\nNow, we’ll join the produts which has the same order ID (grouped) and we’ll create a new column. After that, we’ll remove the duplicates\r\n\r\nproducts[\"Grouped\"]=products.groupby(\"Order ID\")[\"Product\"].transform(lambda x:', '.join(x))\r\n<string>:1: SettingWithCopyWarning: \r\nA value is trying to be set on a copy of a slice from a DataFrame.\r\nTry using .loc[row_indexer,col_indexer] = value instead\r\n\r\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\r\nproducts=products[[\"Order ID\", \"Grouped\"]].drop_duplicates()\r\n\r\nHere we’ll iterate the column Grouped to combine the values that has the same info in their row\r\n\r\ncount=Counter()\r\nfor row in products[\"Grouped\"]:\r\n    row_list=row.split(',')\r\n    count.update(Counter(combinations(row_list,2)))\r\n    \r\nfor key,value in count.most_common(1):\r\n    print(\"Produts that are more often sold together are:\", key)\r\nProduts that are more often sold together are: ('iPhone', ' Lightning Charging Cable')\r\n\r\nQuestion 5: What product sold the most? Why do you think it sold the most?\r\nTo find this answer we need to create a new variable and assign the product column grouped\r\n\r\nsold_most1=df.groupby(\"Product\")[\"Quantity Ordered\"].sum()\r\nsold_most=pd.DataFrame(data=sold_most1) # Creating a dataframe \r\nsold_most.reset_index(inplace=True)\r\nsold_most=sold_most.sort_values(by='Quantity Ordered',ascending=False)\r\nsold_most.iloc[0] # Answer\r\nProduct             AAA Batteries (4-pack)\r\nQuantity Ordered                   31017.0\r\nName: 5, dtype: object\r\n\r\nPlotting in sns\r\n\r\nsns.barplot(x=\"Quantity Ordered\",y=\"Product\",data=sold_most,palette='rocket');\r\nplt.show()\r\n\r\n\r\nPlotting in plt\r\n\r\nplt.bar(sold_most[\"Product\"],sold_most[\"Quantity Ordered\"]);\r\nplt.xticks(sold_most[\"Product\"],rotation='vertical');\r\nplt.show()\r\n\r\n\r\nThe AAA Batteries are the most sold product. My hypothesis it is because they are very cheap product. Lets confirm or not this statement\r\nLets create a new dataframe with the mean values of the product prices\r\n\r\n\r\ncheap1=df.groupby(\"Product\")[\"Price Each\"].mean()\r\ncheap=pd.DataFrame(data=cheap1)\r\ncheap.reset_index(inplace=True)\r\ncheap\r\n                       Product  Price Each\r\n0                 20in Monitor      109.99\r\n1       27in 4K Gaming Monitor      389.99\r\n2             27in FHD Monitor      149.99\r\n3       34in Ultrawide Monitor      379.99\r\n4        AA Batteries (4-pack)        3.84\r\n5       AAA Batteries (4-pack)        2.99\r\n6     Apple Airpods Headphones      150.00\r\n7   Bose SoundSport Headphones       99.99\r\n8                Flatscreen TV      300.00\r\n9                 Google Phone      600.00\r\n10                    LG Dryer      600.00\r\n11          LG Washing Machine      600.00\r\n12    Lightning Charging Cable       14.95\r\n13          Macbook Pro Laptop     1700.00\r\n14             ThinkPad Laptop      999.99\r\n15        USB-C Charging Cable       11.95\r\n16             Vareebadd Phone      400.00\r\n17            Wired Headphones       11.99\r\n18                      iPhone      700.00\r\n\r\nNow, we’ll merge those both dataframe to create a visualization plot with both y axes\r\n\r\nmerg=pd.merge(sold_most,cheap,how='inner')\r\n\r\nPlotting\r\n\r\nsns.barplot(x=\"Product\",y=\"Quantity Ordered\",data=merg);\r\nplt.xticks(rotation=90);\r\nax2 = plt.twinx();\r\nsns.lineplot(x=\"Product\",y=\"Price Each\",data=merg, color=\"b\", ax=ax2);\r\nplt.show()\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-20T00:23:42-07:00"
    }
  ],
  "collections": []
}
